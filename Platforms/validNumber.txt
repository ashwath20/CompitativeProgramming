 /*Validate if a given string can be interpreted as a decimal number.

Some examples:
"0" => true
" 0.1 " => true
"abc" => false
"1 a" => false
"2e10" => true
" -90e3   " => true
" 1e" => false
"e3" => false
" 6e-1" => true
" 99e2.5 " => false
"53.5e93" => true
" --6 " => false
"-+3" => false
"95a54e53" => false

Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:

Numbers 0-9
Exponent - "e"
Positive/negative sign - "+"/"-"
Decimal point - "."
Of course, the context of these characters also matters in the input.

*/
*/
 
 public boolean isNumber(String s) {
        try
        {
		//in java if a number has following letter it will be treated as valid number
            if(s.contains("l") || s.contains("f") || s.contains("d") || s.contains("L") || s.contains("F") || s.contains("D") )
            {
                return false;
            }
            Double d = Double.parseDouble(s);
            return true;
        }
        catch(Exception e)
        {
            return false;
        }
        
    }